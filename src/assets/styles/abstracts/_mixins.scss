
@use 'sass:math';
@use 'variables' as *;
@use 'breakpoints' as *;

@mixin border-radius-small {
  border-radius: 10px;
}

@mixin border-radius-big {
  border-radius: 15px;
}

@mixin border-radius-extra-big {
  border-radius: 20px;
}


@mixin generate-props($prefix, $property) {

  @each $color-name,
  $color in $theme-colors {
    .#{$prefix}-#{$color-name} {
      #{$property}: $color !important
    }
  }
}

@include generate-props('text', 'color');
@include generate-props('bg', 'background');

$enable-transitions: true !default;
$enable-prefers-reduced-motion-media-query: true !default;

@mixin transition($transition...) {
  @if $enable-transitions {
    @if length($transition)==0 {
      transition: $transition-base;
    }

    @else {
      transition: $transition;
    }
  }

  @if $enable-prefers-reduced-motion-media-query {
    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }
}



/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right:math.div($gutter, 2);
  padding-left:math.div($gutter, 2);
  // padding-right: ($gutter/ 2);
  // padding-left: ($gutter/ 2);
  margin-right: auto;
  margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths,
  $breakpoints: $grid-breakpoints) {

  @each $breakpoint,
  $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right:  math.div($gutter, 4);
  margin-left:   math.div($gutter, 4);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage( math.div($size, $columns));
  // flex: 0 0 percentage(($size/ $columns));
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage( math.div($size, $columns));
  // max-width: percentage(($size/ $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num:  math.div($size, $columns);
  // $num: ($size/ $columns);
  margin-left: if($num==0, 0, percentage($num));
}

$enable-gradients : false !default;

@mixin gradient-bg($color) {
  @if $enable-gradients {
    background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;
  }

  @else {
    background-color: $color;
  }
}

$enable-shadows: true !default;

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    $result: ();

    @if (length($shadow)==1) {
      // We can pass `@include box-shadow(none);`
      $result: $shadow;
    }

    @else {

      // Filter to avoid invalid properties for example `box-shadow: none, 1px 1px black;`
      @for $i from 1 through length($shadow) {
        @if nth($shadow, $i) !="none" {
          $result: append($result, nth($shadow, $i), "comma");
        }
      }
    }

    @if (length($result) > 0) {
      box-shadow: $result;
    }
  }
}

@mixin button-variant($background,
  $border,
  $hover-background: darken($background, 7.5%),
  $hover-border: darken($border, 10%),
  $active-background: darken($background, 10%),
  $active-border: darken($border, 12.5%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  transition: all 0.2s ease-in-out;

  @include hover {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
    transition: all 0.2s ease-in-out;

  }

  &:focus,
  &.focus {

    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow,
        0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), 0.5);
    }

    @else {
      box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), 0.5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq($background);
    background-color: $background;
    border-color: $border;

    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show>&.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;

    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }

    border-color: $active-border;

    &:focus {

      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow !=none {
        box-shadow: $btn-active-box-shadow,
          0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), 0.5);
      }

      @else {
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), 0.5);
      }
    }
  }
}
